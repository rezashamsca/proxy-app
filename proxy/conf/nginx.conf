worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

error_log /dev/stdout notice;

events { 
     worker_connections 1024;
}

http {
    resolver 127.0.0.11 ipv6=off;

    upstream docker-blue-app {
        server blue-app;
    }

    upstream docker-green-app {
        server green-app;
    }

    upstream docker-env-api {
        server env-api;
    }

    init_by_lua '
        require "resty.core"
        cjson = require("cjson")
        ngx.log(ngx.DEBUG, "Hello") 
    ';

    lua_shared_dict envdict 10m;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _; 

        location /test {
            content_by_lua_block {
                ngx.log(ngx.STDERR, 'this is a log string from lua')
                ngx.say('Hello,world!')
            }
        }

        location /env-api/ {
            proxy_pass http://docker-env-api/$1;
        }
        
        location /live/ {
            set $proxy_to "";
            rewrite_by_lua '
                local httpc = require("resty.http").new()  
                httpc:connect({
                    scheme = "http",
                    host = "env-api",
                    port = 3000
                })          
                local res, err = httpc:request({
                    path = "/live"
                })

                if not res then
                    ngx.log(ngx.ERR, "request failed: ", err)
                    return
                end

                --  body_reader, has_body, read_trailers, status, headers, read_body, reason
                local reader = res.body_reader
                local buffer_size = 8192
                local body_value = ""
                repeat
                    local buffer, err = reader(buffer_size)
                    if err then
                        ngx.log(ngx.ERR, err)
                        break
                    end

                    if buffer then
                        body_value = body_value .. buffer
                    end
                until not buffer

                ngx.log(ngx.STDERR, body_value)

                local jsonRes = cjson.decode(body_value)

                if string.match(jsonRes["name"], "blue")
                then
                    ngx.var.proxy_to = "http://docker-blue-app/"
                else
                    ngx.var.proxy_to = "http://docker-green-app/"
                end
                ngx.log(ngx.STDERR, ngx.var.proxy_to);
            ';

            add_header X-debug-message  $proxy_to always;

            proxy_redirect off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_pass $proxy_to;
        }
    }
}